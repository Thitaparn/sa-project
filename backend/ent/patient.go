// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/TP/app/ent/disease"
	"github.com/TP/app/ent/employee"
	"github.com/TP/app/ent/gender"
	"github.com/TP/app/ent/medicalcare"
	"github.com/TP/app/ent/patient"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PatientID holds the value of the "patient_ID" field.
	PatientID string `json:"patient_ID,omitempty"`
	// PatientName holds the value of the "patient_name" field.
	PatientName string `json:"patient_name,omitempty"`
	// PatientCardID holds the value of the "patient_cardID" field.
	PatientCardID string `json:"patient_cardID,omitempty"`
	// PatientAddress holds the value of the "patient_address" field.
	PatientAddress string `json:"patient_address,omitempty"`
	// PatientTel holds the value of the "patient_tel" field.
	PatientTel string `json:"patient_tel,omitempty"`
	// PatientAge holds the value of the "patient_age" field.
	PatientAge int `json:"patient_age,omitempty"`
	// PatientBirthday holds the value of the "patient_birthday" field.
	PatientBirthday time.Time `json:"patient_birthday,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges          PatientEdges `json:"edges"`
	disease_id     *int
	employee_id    *int
	gender_id      *int
	medicalcare_id *int
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Gender holds the value of the gender edge.
	Gender *Gender
	// Medicalcare holds the value of the medicalcare edge.
	Medicalcare *MedicalCare
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Disease holds the value of the disease edge.
	Disease *Disease
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[0] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// MedicalcareOrErr returns the Medicalcare value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) MedicalcareOrErr() (*MedicalCare, error) {
	if e.loadedTypes[1] {
		if e.Medicalcare == nil {
			// The edge medicalcare was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicalcare.Label}
		}
		return e.Medicalcare, nil
	}
	return nil, &NotLoadedError{edge: "medicalcare"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[2] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) DiseaseOrErr() (*Disease, error) {
	if e.loadedTypes[3] {
		if e.Disease == nil {
			// The edge disease was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: disease.Label}
		}
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // patient_ID
		&sql.NullString{}, // patient_name
		&sql.NullString{}, // patient_cardID
		&sql.NullString{}, // patient_address
		&sql.NullString{}, // patient_tel
		&sql.NullInt64{},  // patient_age
		&sql.NullTime{},   // patient_birthday
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Patient) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // disease_id
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // gender_id
		&sql.NullInt64{}, // medicalcare_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field patient_ID", values[0])
	} else if value.Valid {
		pa.PatientID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field patient_name", values[1])
	} else if value.Valid {
		pa.PatientName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field patient_cardID", values[2])
	} else if value.Valid {
		pa.PatientCardID = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field patient_address", values[3])
	} else if value.Valid {
		pa.PatientAddress = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field patient_tel", values[4])
	} else if value.Valid {
		pa.PatientTel = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field patient_age", values[5])
	} else if value.Valid {
		pa.PatientAge = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field patient_birthday", values[6])
	} else if value.Valid {
		pa.PatientBirthday = value.Time
	}
	values = values[7:]
	if len(values) == len(patient.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field disease_id", value)
		} else if value.Valid {
			pa.disease_id = new(int)
			*pa.disease_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			pa.employee_id = new(int)
			*pa.employee_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field gender_id", value)
		} else if value.Valid {
			pa.gender_id = new(int)
			*pa.gender_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medicalcare_id", value)
		} else if value.Valid {
			pa.medicalcare_id = new(int)
			*pa.medicalcare_id = int(value.Int64)
		}
	}
	return nil
}

// QueryGender queries the gender edge of the Patient.
func (pa *Patient) QueryGender() *GenderQuery {
	return (&PatientClient{config: pa.config}).QueryGender(pa)
}

// QueryMedicalcare queries the medicalcare edge of the Patient.
func (pa *Patient) QueryMedicalcare() *MedicalCareQuery {
	return (&PatientClient{config: pa.config}).QueryMedicalcare(pa)
}

// QueryEmployee queries the employee edge of the Patient.
func (pa *Patient) QueryEmployee() *EmployeeQuery {
	return (&PatientClient{config: pa.config}).QueryEmployee(pa)
}

// QueryDisease queries the disease edge of the Patient.
func (pa *Patient) QueryDisease() *DiseaseQuery {
	return (&PatientClient{config: pa.config}).QueryDisease(pa)
}

// Update returns a builder for updating this Patient.
// Note that, you need to call Patient.Unwrap() before calling this method, if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", patient_ID=")
	builder.WriteString(pa.PatientID)
	builder.WriteString(", patient_name=")
	builder.WriteString(pa.PatientName)
	builder.WriteString(", patient_cardID=")
	builder.WriteString(pa.PatientCardID)
	builder.WriteString(", patient_address=")
	builder.WriteString(pa.PatientAddress)
	builder.WriteString(", patient_tel=")
	builder.WriteString(pa.PatientTel)
	builder.WriteString(", patient_age=")
	builder.WriteString(fmt.Sprintf("%v", pa.PatientAge))
	builder.WriteString(", patient_birthday=")
	builder.WriteString(pa.PatientBirthday.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
