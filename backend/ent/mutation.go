// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/TP/app/ent/disease"
	"github.com/TP/app/ent/employee"
	"github.com/TP/app/ent/gender"
	"github.com/TP/app/ent/medicalcare"
	"github.com/TP/app/ent/patient"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDisease     = "Disease"
	TypeEmployee    = "Employee"
	TypeGender      = "Gender"
	TypeMedicalCare = "MedicalCare"
	TypePatient     = "Patient"
)

// DiseaseMutation represents an operation that mutate the Diseases
// nodes in the graph.
type DiseaseMutation struct {
	config
	op              Op
	typ             string
	id              *int
	disease_name    *string
	clearedFields   map[string]struct{}
	patients        map[int]struct{}
	removedpatients map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Disease, error)
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows to manage the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for $n.Name.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the id field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiseaseName sets the disease_name field.
func (m *DiseaseMutation) SetDiseaseName(s string) {
	m.disease_name = &s
}

// DiseaseName returns the disease_name value in the mutation.
func (m *DiseaseMutation) DiseaseName() (r string, exists bool) {
	v := m.disease_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDiseaseName returns the old disease_name value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldDiseaseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiseaseName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiseaseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiseaseName: %w", err)
	}
	return oldValue.DiseaseName, nil
}

// ResetDiseaseName reset all changes of the "disease_name" field.
func (m *DiseaseMutation) ResetDiseaseName() {
	m.disease_name = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *DiseaseMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *DiseaseMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *DiseaseMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *DiseaseMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *DiseaseMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.disease_name != nil {
		fields = append(fields, disease.FieldDiseaseName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldDiseaseName:
		return m.DiseaseName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldDiseaseName:
		return m.OldDiseaseName(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldDiseaseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiseaseName(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldDiseaseName:
		m.ResetDiseaseName()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, disease.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, disease.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op                Op
	typ               string
	id                *int
	employee_name     *string
	employee_email    *string
	employee_password *string
	clearedFields     map[string]struct{}
	patients          map[int]struct{}
	removedpatients   map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmployeeName sets the employee_name field.
func (m *EmployeeMutation) SetEmployeeName(s string) {
	m.employee_name = &s
}

// EmployeeName returns the employee_name value in the mutation.
func (m *EmployeeMutation) EmployeeName() (r string, exists bool) {
	v := m.employee_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeName returns the old employee_name value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmployeeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmployeeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmployeeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeName: %w", err)
	}
	return oldValue.EmployeeName, nil
}

// ResetEmployeeName reset all changes of the "employee_name" field.
func (m *EmployeeMutation) ResetEmployeeName() {
	m.employee_name = nil
}

// SetEmployeeEmail sets the employee_email field.
func (m *EmployeeMutation) SetEmployeeEmail(s string) {
	m.employee_email = &s
}

// EmployeeEmail returns the employee_email value in the mutation.
func (m *EmployeeMutation) EmployeeEmail() (r string, exists bool) {
	v := m.employee_email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeEmail returns the old employee_email value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmployeeEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmployeeEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmployeeEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeEmail: %w", err)
	}
	return oldValue.EmployeeEmail, nil
}

// ResetEmployeeEmail reset all changes of the "employee_email" field.
func (m *EmployeeMutation) ResetEmployeeEmail() {
	m.employee_email = nil
}

// SetEmployeePassword sets the employee_password field.
func (m *EmployeeMutation) SetEmployeePassword(s string) {
	m.employee_password = &s
}

// EmployeePassword returns the employee_password value in the mutation.
func (m *EmployeeMutation) EmployeePassword() (r string, exists bool) {
	v := m.employee_password
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeePassword returns the old employee_password value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmployeePassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmployeePassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmployeePassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeePassword: %w", err)
	}
	return oldValue.EmployeePassword, nil
}

// ResetEmployeePassword reset all changes of the "employee_password" field.
func (m *EmployeeMutation) ResetEmployeePassword() {
	m.employee_password = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *EmployeeMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *EmployeeMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *EmployeeMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *EmployeeMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *EmployeeMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.employee_name != nil {
		fields = append(fields, employee.FieldEmployeeName)
	}
	if m.employee_email != nil {
		fields = append(fields, employee.FieldEmployeeEmail)
	}
	if m.employee_password != nil {
		fields = append(fields, employee.FieldEmployeePassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldEmployeeName:
		return m.EmployeeName()
	case employee.FieldEmployeeEmail:
		return m.EmployeeEmail()
	case employee.FieldEmployeePassword:
		return m.EmployeePassword()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldEmployeeName:
		return m.OldEmployeeName(ctx)
	case employee.FieldEmployeeEmail:
		return m.OldEmployeeEmail(ctx)
	case employee.FieldEmployeePassword:
		return m.OldEmployeePassword(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldEmployeeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeName(v)
		return nil
	case employee.FieldEmployeeEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeEmail(v)
		return nil
	case employee.FieldEmployeePassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeePassword(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldEmployeeName:
		m.ResetEmployeeName()
		return nil
	case employee.FieldEmployeeEmail:
		m.ResetEmployeeEmail()
		return nil
	case employee.FieldEmployeePassword:
		m.ResetEmployeePassword()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, employee.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, employee.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op              Op
	typ             string
	id              *int
	gender_name     *string
	clearedFields   map[string]struct{}
	patients        map[int]struct{}
	removedpatients map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGenderName sets the gender_name field.
func (m *GenderMutation) SetGenderName(s string) {
	m.gender_name = &s
}

// GenderName returns the gender_name value in the mutation.
func (m *GenderMutation) GenderName() (r string, exists bool) {
	v := m.gender_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderName returns the old gender_name value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGenderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenderName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderName: %w", err)
	}
	return oldValue.GenderName, nil
}

// ResetGenderName reset all changes of the "gender_name" field.
func (m *GenderMutation) ResetGenderName() {
	m.gender_name = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *GenderMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *GenderMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *GenderMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *GenderMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *GenderMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.gender_name != nil {
		fields = append(fields, gender.FieldGenderName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGenderName:
		return m.GenderName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGenderName:
		return m.OldGenderName(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGenderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderName(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGenderName:
		m.ResetGenderName()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, gender.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, gender.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// MedicalCareMutation represents an operation that mutate the MedicalCares
// nodes in the graph.
type MedicalCareMutation struct {
	config
	op               Op
	typ              string
	id               *int
	medicalcare_name *string
	clearedFields    map[string]struct{}
	patients         map[int]struct{}
	removedpatients  map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*MedicalCare, error)
}

var _ ent.Mutation = (*MedicalCareMutation)(nil)

// medicalcareOption allows to manage the mutation configuration using functional options.
type medicalcareOption func(*MedicalCareMutation)

// newMedicalCareMutation creates new mutation for $n.Name.
func newMedicalCareMutation(c config, op Op, opts ...medicalcareOption) *MedicalCareMutation {
	m := &MedicalCareMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalCare,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalCareID sets the id field of the mutation.
func withMedicalCareID(id int) medicalcareOption {
	return func(m *MedicalCareMutation) {
		var (
			err   error
			once  sync.Once
			value *MedicalCare
		)
		m.oldValue = func(ctx context.Context) (*MedicalCare, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedicalCare.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalCare sets the old MedicalCare of the mutation.
func withMedicalCare(node *MedicalCare) medicalcareOption {
	return func(m *MedicalCareMutation) {
		m.oldValue = func(context.Context) (*MedicalCare, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalCareMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalCareMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalCareMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMedicalcareName sets the medicalcare_name field.
func (m *MedicalCareMutation) SetMedicalcareName(s string) {
	m.medicalcare_name = &s
}

// MedicalcareName returns the medicalcare_name value in the mutation.
func (m *MedicalCareMutation) MedicalcareName() (r string, exists bool) {
	v := m.medicalcare_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicalcareName returns the old medicalcare_name value of the MedicalCare.
// If the MedicalCare object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalCareMutation) OldMedicalcareName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMedicalcareName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMedicalcareName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicalcareName: %w", err)
	}
	return oldValue.MedicalcareName, nil
}

// ResetMedicalcareName reset all changes of the "medicalcare_name" field.
func (m *MedicalCareMutation) ResetMedicalcareName() {
	m.medicalcare_name = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *MedicalCareMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *MedicalCareMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *MedicalCareMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *MedicalCareMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *MedicalCareMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *MedicalCareMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MedicalCare).
func (m *MedicalCareMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalCareMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.medicalcare_name != nil {
		fields = append(fields, medicalcare.FieldMedicalcareName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalCareMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicalcare.FieldMedicalcareName:
		return m.MedicalcareName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalCareMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicalcare.FieldMedicalcareName:
		return m.OldMedicalcareName(ctx)
	}
	return nil, fmt.Errorf("unknown MedicalCare field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalCareMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicalcare.FieldMedicalcareName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicalcareName(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalCare field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalCareMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalCareMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalCareMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalCare numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalCareMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalCareMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalCareMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedicalCare nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalCareMutation) ResetField(name string) error {
	switch name {
	case medicalcare.FieldMedicalcareName:
		m.ResetMedicalcareName()
		return nil
	}
	return fmt.Errorf("unknown MedicalCare field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalCareMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, medicalcare.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalCareMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicalcare.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalCareMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, medicalcare.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalCareMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicalcare.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalCareMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalCareMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalCareMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalCare unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalCareMutation) ResetEdge(name string) error {
	switch name {
	case medicalcare.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown MedicalCare edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	patient_ID         *string
	patient_name       *string
	patient_cardID     *string
	patient_address    *string
	patient_tel        *string
	patient_age        *int
	addpatient_age     *int
	patient_birthday   *time.Time
	clearedFields      map[string]struct{}
	gender             *int
	clearedgender      bool
	medicalcare        *int
	clearedmedicalcare bool
	employee           *int
	clearedemployee    bool
	disease            *int
	cleareddisease     bool
	done               bool
	oldValue           func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientID sets the patient_ID field.
func (m *PatientMutation) SetPatientID(s string) {
	m.patient_ID = &s
}

// PatientID returns the patient_ID value in the mutation.
func (m *PatientMutation) PatientID() (r string, exists bool) {
	v := m.patient_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientID returns the old patient_ID value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientID: %w", err)
	}
	return oldValue.PatientID, nil
}

// ResetPatientID reset all changes of the "patient_ID" field.
func (m *PatientMutation) ResetPatientID() {
	m.patient_ID = nil
}

// SetPatientName sets the patient_name field.
func (m *PatientMutation) SetPatientName(s string) {
	m.patient_name = &s
}

// PatientName returns the patient_name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m.patient_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old patient_name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "patient_name" field.
func (m *PatientMutation) ResetPatientName() {
	m.patient_name = nil
}

// SetPatientCardID sets the patient_cardID field.
func (m *PatientMutation) SetPatientCardID(s string) {
	m.patient_cardID = &s
}

// PatientCardID returns the patient_cardID value in the mutation.
func (m *PatientMutation) PatientCardID() (r string, exists bool) {
	v := m.patient_cardID
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientCardID returns the old patient_cardID value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientCardID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientCardID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientCardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientCardID: %w", err)
	}
	return oldValue.PatientCardID, nil
}

// ResetPatientCardID reset all changes of the "patient_cardID" field.
func (m *PatientMutation) ResetPatientCardID() {
	m.patient_cardID = nil
}

// SetPatientAddress sets the patient_address field.
func (m *PatientMutation) SetPatientAddress(s string) {
	m.patient_address = &s
}

// PatientAddress returns the patient_address value in the mutation.
func (m *PatientMutation) PatientAddress() (r string, exists bool) {
	v := m.patient_address
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientAddress returns the old patient_address value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientAddress: %w", err)
	}
	return oldValue.PatientAddress, nil
}

// ResetPatientAddress reset all changes of the "patient_address" field.
func (m *PatientMutation) ResetPatientAddress() {
	m.patient_address = nil
}

// SetPatientTel sets the patient_tel field.
func (m *PatientMutation) SetPatientTel(s string) {
	m.patient_tel = &s
}

// PatientTel returns the patient_tel value in the mutation.
func (m *PatientMutation) PatientTel() (r string, exists bool) {
	v := m.patient_tel
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientTel returns the old patient_tel value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientTel: %w", err)
	}
	return oldValue.PatientTel, nil
}

// ResetPatientTel reset all changes of the "patient_tel" field.
func (m *PatientMutation) ResetPatientTel() {
	m.patient_tel = nil
}

// SetPatientAge sets the patient_age field.
func (m *PatientMutation) SetPatientAge(i int) {
	m.patient_age = &i
	m.addpatient_age = nil
}

// PatientAge returns the patient_age value in the mutation.
func (m *PatientMutation) PatientAge() (r int, exists bool) {
	v := m.patient_age
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientAge returns the old patient_age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientAge: %w", err)
	}
	return oldValue.PatientAge, nil
}

// AddPatientAge adds i to patient_age.
func (m *PatientMutation) AddPatientAge(i int) {
	if m.addpatient_age != nil {
		*m.addpatient_age += i
	} else {
		m.addpatient_age = &i
	}
}

// AddedPatientAge returns the value that was added to the patient_age field in this mutation.
func (m *PatientMutation) AddedPatientAge() (r int, exists bool) {
	v := m.addpatient_age
	if v == nil {
		return
	}
	return *v, true
}

// ResetPatientAge reset all changes of the "patient_age" field.
func (m *PatientMutation) ResetPatientAge() {
	m.patient_age = nil
	m.addpatient_age = nil
}

// SetPatientBirthday sets the patient_birthday field.
func (m *PatientMutation) SetPatientBirthday(t time.Time) {
	m.patient_birthday = &t
}

// PatientBirthday returns the patient_birthday value in the mutation.
func (m *PatientMutation) PatientBirthday() (r time.Time, exists bool) {
	v := m.patient_birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientBirthday returns the old patient_birthday value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientBirthday is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientBirthday: %w", err)
	}
	return oldValue.PatientBirthday, nil
}

// ResetPatientBirthday reset all changes of the "patient_birthday" field.
func (m *PatientMutation) ResetPatientBirthday() {
	m.patient_birthday = nil
}

// SetGenderID sets the gender edge to Gender by id.
func (m *PatientMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *PatientMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *PatientMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *PatientMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetMedicalcareID sets the medicalcare edge to MedicalCare by id.
func (m *PatientMutation) SetMedicalcareID(id int) {
	m.medicalcare = &id
}

// ClearMedicalcare clears the medicalcare edge to MedicalCare.
func (m *PatientMutation) ClearMedicalcare() {
	m.clearedmedicalcare = true
}

// MedicalcareCleared returns if the edge medicalcare was cleared.
func (m *PatientMutation) MedicalcareCleared() bool {
	return m.clearedmedicalcare
}

// MedicalcareID returns the medicalcare id in the mutation.
func (m *PatientMutation) MedicalcareID() (id int, exists bool) {
	if m.medicalcare != nil {
		return *m.medicalcare, true
	}
	return
}

// MedicalcareIDs returns the medicalcare ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MedicalcareID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) MedicalcareIDs() (ids []int) {
	if id := m.medicalcare; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedicalcare reset all changes of the "medicalcare" edge.
func (m *PatientMutation) ResetMedicalcare() {
	m.medicalcare = nil
	m.clearedmedicalcare = false
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *PatientMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *PatientMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *PatientMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *PatientMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *PatientMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *PatientMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *PatientMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *PatientMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *PatientMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *PatientMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.patient_ID != nil {
		fields = append(fields, patient.FieldPatientID)
	}
	if m.patient_name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m.patient_cardID != nil {
		fields = append(fields, patient.FieldPatientCardID)
	}
	if m.patient_address != nil {
		fields = append(fields, patient.FieldPatientAddress)
	}
	if m.patient_tel != nil {
		fields = append(fields, patient.FieldPatientTel)
	}
	if m.patient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	if m.patient_birthday != nil {
		fields = append(fields, patient.FieldPatientBirthday)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientID:
		return m.PatientID()
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldPatientCardID:
		return m.PatientCardID()
	case patient.FieldPatientAddress:
		return m.PatientAddress()
	case patient.FieldPatientTel:
		return m.PatientTel()
	case patient.FieldPatientAge:
		return m.PatientAge()
	case patient.FieldPatientBirthday:
		return m.PatientBirthday()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientID:
		return m.OldPatientID(ctx)
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldPatientCardID:
		return m.OldPatientCardID(ctx)
	case patient.FieldPatientAddress:
		return m.OldPatientAddress(ctx)
	case patient.FieldPatientTel:
		return m.OldPatientTel(ctx)
	case patient.FieldPatientAge:
		return m.OldPatientAge(ctx)
	case patient.FieldPatientBirthday:
		return m.OldPatientBirthday(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientID(v)
		return nil
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldPatientCardID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientCardID(v)
		return nil
	case patient.FieldPatientAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientAddress(v)
		return nil
	case patient.FieldPatientTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientTel(v)
		return nil
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientAge(v)
		return nil
	case patient.FieldPatientBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientBirthday(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addpatient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientAge:
		return m.AddedPatientAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientID:
		m.ResetPatientID()
		return nil
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldPatientCardID:
		m.ResetPatientCardID()
		return nil
	case patient.FieldPatientAddress:
		m.ResetPatientAddress()
		return nil
	case patient.FieldPatientTel:
		m.ResetPatientTel()
		return nil
	case patient.FieldPatientAge:
		m.ResetPatientAge()
		return nil
	case patient.FieldPatientBirthday:
		m.ResetPatientBirthday()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.gender != nil {
		edges = append(edges, patient.EdgeGender)
	}
	if m.medicalcare != nil {
		edges = append(edges, patient.EdgeMedicalcare)
	}
	if m.employee != nil {
		edges = append(edges, patient.EdgeEmployee)
	}
	if m.disease != nil {
		edges = append(edges, patient.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeMedicalcare:
		if id := m.medicalcare; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedgender {
		edges = append(edges, patient.EdgeGender)
	}
	if m.clearedmedicalcare {
		edges = append(edges, patient.EdgeMedicalcare)
	}
	if m.clearedemployee {
		edges = append(edges, patient.EdgeEmployee)
	}
	if m.cleareddisease {
		edges = append(edges, patient.EdgeDisease)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeGender:
		return m.clearedgender
	case patient.EdgeMedicalcare:
		return m.clearedmedicalcare
	case patient.EdgeEmployee:
		return m.clearedemployee
	case patient.EdgeDisease:
		return m.cleareddisease
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgeGender:
		m.ClearGender()
		return nil
	case patient.EdgeMedicalcare:
		m.ClearMedicalcare()
		return nil
	case patient.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case patient.EdgeDisease:
		m.ClearDisease()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeGender:
		m.ResetGender()
		return nil
	case patient.EdgeMedicalcare:
		m.ResetMedicalcare()
		return nil
	case patient.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case patient.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}
