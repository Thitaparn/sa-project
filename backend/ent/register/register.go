// Code generated by entc, DO NOT EDIT.

package register

import (
	"time"
)

const (
	// Label holds the string label denoting the register type in the database.
	Label = "register"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRegisterPatientID holds the string denoting the register_patient_id field in the database.
	FieldRegisterPatientID = "register_patient_id"
	// FieldRegisterName holds the string denoting the register_name field in the database.
	FieldRegisterName = "register_name"
	// FieldRegisterCardID holds the string denoting the register_cardid field in the database.
	FieldRegisterCardID = "register_card_id"
	// FieldRegisterAddress holds the string denoting the register_address field in the database.
	FieldRegisterAddress = "register_address"
	// FieldRegisterBirthday holds the string denoting the register_birthday field in the database.
	FieldRegisterBirthday = "register_birthday"
	// FieldRegisterTel holds the string denoting the register_tel field in the database.
	FieldRegisterTel = "register_tel"
	// FieldRegisterHight holds the string denoting the register_hight field in the database.
	FieldRegisterHight = "register_hight"
	// FieldRegisterWeight holds the string denoting the register_weight field in the database.
	FieldRegisterWeight = "register_weight"
	// FieldRegisterAge holds the string denoting the register_age field in the database.
	FieldRegisterAge = "register_age"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeHave holds the string denoting the have edge name in mutations.
	EdgeHave = "have"
	// EdgeOwner1 holds the string denoting the owner1 edge name in mutations.
	EdgeOwner1 = "owner1"
	// EdgeHave1 holds the string denoting the have1 edge name in mutations.
	EdgeHave1 = "have1"

	// Table holds the table name of the register in the database.
	Table = "registers"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "registers"
	// OwnerInverseTable is the table name for the Gender entity.
	// It exists in this package in order to avoid circular dependency with the "gender" package.
	OwnerInverseTable = "genders"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "gender_genders"
	// HaveTable is the table the holds the have relation/edge.
	HaveTable = "registers"
	// HaveInverseTable is the table name for the MedicalCare entity.
	// It exists in this package in order to avoid circular dependency with the "medicalcare" package.
	HaveInverseTable = "medical_cares"
	// HaveColumn is the table column denoting the have relation/edge.
	HaveColumn = "medical_care_medicalcares"
	// Owner1Table is the table the holds the owner1 relation/edge.
	Owner1Table = "registers"
	// Owner1InverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	Owner1InverseTable = "employees"
	// Owner1Column is the table column denoting the owner1 relation/edge.
	Owner1Column = "employee_employees"
	// Have1Table is the table the holds the have1 relation/edge.
	Have1Table = "registers"
	// Have1InverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	Have1InverseTable = "diseases"
	// Have1Column is the table column denoting the have1 relation/edge.
	Have1Column = "disease_diseases"
)

// Columns holds all SQL columns for register fields.
var Columns = []string{
	FieldID,
	FieldRegisterPatientID,
	FieldRegisterName,
	FieldRegisterCardID,
	FieldRegisterAddress,
	FieldRegisterBirthday,
	FieldRegisterTel,
	FieldRegisterHight,
	FieldRegisterWeight,
	FieldRegisterAge,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Register type.
var ForeignKeys = []string{
	"disease_diseases",
	"employee_employees",
	"gender_genders",
	"medical_care_medicalcares",
}

var (
	// RegisterPatientIDValidator is a validator for the "register_Patient_id" field. It is called by the builders before save.
	RegisterPatientIDValidator func(string) error
	// RegisterNameValidator is a validator for the "register_name" field. It is called by the builders before save.
	RegisterNameValidator func(string) error
	// RegisterCardIDValidator is a validator for the "register_cardID" field. It is called by the builders before save.
	RegisterCardIDValidator func(string) error
	// RegisterAddressValidator is a validator for the "register_address" field. It is called by the builders before save.
	RegisterAddressValidator func(string) error
	// DefaultRegisterBirthday holds the default value on creation for the register_birthday field.
	DefaultRegisterBirthday func() time.Time
	// RegisterAgeValidator is a validator for the "register_age" field. It is called by the builders before save.
	RegisterAgeValidator func(int) error
)
